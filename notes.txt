void PerformRotations()
{
    FVector VecX(1, 0, 0);  // Vector along the X-axis
    FVector VecZ(0, 0, 1);  // Vector along the Z-axis

    // Roll around the Y-axis
    FRotator RollRotator(0, 0, 90);  // Pitch, Yaw, Roll
    FMatrix RollMatrix = FRotationMatrix(RollRotator);
    FVector RotatedVecX = RollMatrix.TransformVector(VecX);
    FVector RotatedVecZ = RollMatrix.TransformVector(VecZ);

    UE_LOG(LogTemp, Warning, TEXT("Original Vector X: %s, Rotated Vector X by Roll: %s"), *VecX.ToString(), *RotatedVecX.ToString());
    UE_LOG(LogTemp, Warning, TEXT("Original Vector Z: %s, Rotated Vector Z by Roll: %s"), *VecZ.ToString(), *RotatedVecZ.ToString());
}

void CubeAlgorithm::test() {
    UE_LOG(LogTemp, Error, TEXT("CubeAlgorithm::test()"));

    // BaseCubeObj obj;
    
    // UE_LOG(LogTemp, Warning, TEXT("Base Cube: %s"), *obj.getFacing().ToString());

    FVector vector = FVector(1, 0, 0);
    std::vector<FVector> vecs = {FVector(1, 0, 0), FVector(0, -1, 0), FVector(0, 0, 1), FVector(1, 0, 1), FVector(0, 1, 0), FVector(0, 1, -1)};
    std::vector<FRotator> rots = {FRotator(-90, 0, 0), FRotator(0, -90, 0), FRotator(0, 0, -90)};
    FRotator rotator = FRotator(0, 90, 0);
    FMatrix rotationMatrix = FRotationMatrix(rotator);
    FVector rotatedVector = rotationMatrix.TransformVector(vector);
    UE_LOG(LogTemp, Error, TEXT("vector: %s rotatedVector: %s"), *vector.ToString(), *rotatedVector.ToString());

    UE_LOG(LogTemp, Error, TEXT("vecs.size(): %d"), vecs.size());
    for (int i = 0; i < vecs.size(); i++) {
        vector = vecs[i];
        UE_LOG(LogTemp, Warning, TEXT("for vector: %s"), *vector.ToString());
        for (int j = 0; j < rots.size(); j++) {
            rotator = rots[j];
            rotationMatrix = FRotationMatrix(rotator);
            rotatedVector = rotationMatrix.TransformVector(vector);
            // UE_LOG(LogTemp, Warning, TEXT("rotationMatrix: %s"), *rotationMatrix.ToString());
            UE_LOG(LogTemp, Error, TEXT("rotator: %s rotatedVector: %s"), *rotator.ToString(), *rotatedVector.ToString());
        }
        
    }
    // PerformRotations();
}